(define (make-clock h m)
  (let ((minutes (+ (* h 60) m)))
    (define (tick)
      (set! minutes (+ minutes 1)))
    (define (time)
      (cond ((= minutes 1440) (string-append (number->string (- (/ minutes 60) 12)) ":" "00 AM") (display "\n"))
            ((= minutes 720) (string-append (number->string (/ minutes 60)) ":" "00 PM\n") (display "\n"))
            ((< minutes 720) (string-append (number->string (floor (/ minutes 60))) ":"
                                                   (if (< (* (- (/ minutes 60) (floor (/ minutes 60))) 60) 10)
                                                       (string-append "0" (number->string (* (- (/ minutes 60) (floor (/ minutes 60))) 60)) " AM") (display "\n")
                                                       (string-append (number->string (* (- (/ minutes 60) (floor (/ minutes 60))) 60)) " AM"))) (display "\n"))
            ((> minutes 720) (string-append (if (= (floor (/ minutes 60)) 12)
                                                       (string-append "12")
                                                       (string-append (number->string (- (floor (/ minutes 60)) 12))))
                                                   ":"
                                                   (if (< (* (- (/ minutes 60) (floor (/ minutes 60))) 60) 10)
                                                       (string-append "0" (number->string (* (- (/ minutes 60) (floor (/ minutes 60))) 60)) " PM") (display "\n")
                                                       (string-append (number->string (* (- (/ minutes 60) (floor (/ minutes 60))) 60)) " PM"))) (display "\n"))))
    (define (military)
      (if (< minutes 720)
          (string-append "0" (number->string (floor (/ minutes 60))) ":"
                                (if (< (* (- (/ minutes 60) (floor (/ minutes 60))) 60) 10)
                                    (string-append "0" (number->string (* (- (/ minutes 60) (floor (/ minutes 60))) 60))) (display "\n")
                                    (string-append (number->string (* (- (/ minutes 60) (floor (/ minutes 60))) 60)) "\n"))) (display "\n")
          (string-append (number->string (floor (/ minutes 60))) ":"
                                (if (< (* (- (/ minutes 60) (floor (/ minutes 60))) 60) 10)
                                    (string-append "0" (number->string (* (- (/ minutes 60) (floor (/ minutes 60))) 60))) (display "\n")
                                    (string-append (number->string (* (- (/ minutes 60) (floor (/ minutes 60))) 60)) "\n"))) (display "\n")))
    (lambda (method)
      (cond ((eq? method 'tick) tick)
            ((eq? method 'time) time)
            ((eq? method 'military) military)))))

(define my-clock (make-clock 12 0))
((my-clock 'time))

(define (make-stack)
  (let ((s (list)))
    (define (empty?)
      (if (null? s)
          #t
          #f))
    (define (push x)
      (set! s (cons x s)))
    (define (pop)
      (begin (display (number->string (car s)))
             (set! s (cdr s))))
    (define (top)
      (display (number->string (car s))))
    (define (dispatcher method)
      (cond ((eq? method 'empty?) empty?)
            ((eq? method 'push) push)
            ((eq? method 'pop) pop)
            ((eq? method 'top) top)))
    dispatcher))